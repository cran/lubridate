
Version 1.1.0
-------------------------------------------------------------------------
DEVELOPMENT

* lubridate no longer overwrites base R methods for +, - , *, /, %%, and %/%. To recreate the previous experience of subtracting two date times to create an interval, we've added the interval creation function %--%.

* lubridate has moved to an S4 object system. Timespans, Intervals, Durations, and Periods have each been redefined as an S4 class with its own methods.

* arithmetic operations will no longer perform implicit class changes between timespans. Users must explicitly state how and when they wish class changes to occur with as.period(), as.duration(), and as.interval(). This makes code written with lubridate more robust, as such implicit changes often did not produce consistent behavior across a variety of operations. It also allows lubridate to be less chatty with fewer console messages. lubridate does not need to explain what it is doing, because it no longer attempts to do things whose outcome would not be clear. On the other hand, arithmetic between multiple time classes will produce informative error messages.

* the internal structure of lubridate R code has been reorganized at https://github.com/hadley/lubridate to make lubridate more development friendly.


NEW FEATURES

* intervals are now more useful and lubridate has more ways to manipulate them. Intervals can be created with %--%; modified with int_shift(), int_flip(), and int_standardize(); manipulated with intersect(), union(), and setdiff(); and used in logical tests with int_aligns(), int_overlaps(), and %within%. lubridate will no longer perform arithmetic between two intervals because the correct results of such operations is no more obvious than the correct result of adding two dates. Instead users are encouraged to use the new set operations or to directly modify intervals with int_start() and int_end(), which can also be used as settors. lubridate now supports negative intervals as well as positive intervals. Intervals also now display with a time zone.

* Modulo methods for timespans have been changed to return a timespan. this allows modulo methods to be used with integer division in an intuitive manner, e.g.

a = a %/% b * b + a %% b

Users can still acheive a numerical result by using as.numeric() on input before performing modulo.

* Periods, durations, and intervals can now all be put into a data frame.

* Periods, durations, and intervals can be intuitively subset with $ and []. These operations also can be used as settors with <-.

* The parsing functions and the as.period method for intervals are now slightly faster.

* month<- and wday<- settors accept names as well as numbers

* parsing functions now have a quiet argument to parse without messages and a tz argument to directly parse times into the desired time zone.

* logical comparison methods now work for period objects.

Version 0.2.6
-------------------------------------------------------------------------

* use `test_package` to avoid incompatibility with current version of
  `testthat`
  
* other minor fixes to pass `R CMD check`

Version 0.2.5
-------------------------------------------------------------------------

* added ymdThms() for parsing ISO 8061 formatted combned dates and times

BUG FIXES

* removed bug in parsing dates with "T" in them

* modified as.period.interval() to display periods in positive units

Version 0.2.4
-------------------------------------------------------------------------

* Add citations to JSS article

Version 0.2.3
-------------------------------------------------------------------------
NEW FEATURES

* ymd_hms(), hms(), and ms() functions can now parse dates that include decimal values in the seconds element.

* milliseconds(), microseconds(), nanoseconds(), and picoseconds() create period objects of the specified lengths. dmilliseconds(), dmicroseconds(), dnanoseconds(), and dpicoseconds() make duration objects of the specified lengths.


BUG FIXES

* lubridate no longer overwrites months(), start(), and end() from base R. Start and end have been replaced with int_start() and int_end(). 

* lubridate imports plyr and stringr packages, instead of depending on them.

Version 0.2.2
-------------------------------------------------------------------------
NEW FEATURES

* made division, modulo, and integer division operations compatible with difftimes

* created c() methods for periods and durations


BUG FIXES

* fixed bug in division, modulo, and integer operations with timespans


Version 0.2.1
-------------------------------------------------------------------------

NEW FEATURES

* created parsing functions ymd_hm ymd_h dmy_hms dmy_hm dmy_h mdy_hms mdy_hm mdy_h ydm_hms ydm_hm ydm_h, which operate in the same way as ymd_hms().

BUG FIXES

* fixed bug in add_dates(). duration objects can now be successfully added to numeric objects.


Version 0.2
-------------------------------------------------------------------------

NEW FEATURES

* division between timespans: each timespan class (durations, periods, intervals) 
  can be divided by other timespans. For example, how many weeks are there between 
  Halloween and Christmas?: (christmas - halloween) / weeks(1)
  
* modulo operations between timespans

* duration objects now have their own class and display format separate from difftimes

* interval objects now use an improved data structure and have a cleaner display format

* lubridate now loads its own namespace

* math operations now automatically coerce interval objects to duration objects. Allows 
  intervals to be used "right out of the box" without error messages.
  
* created start() and end() functions for accessing and changing the boundary date-times of an interval


* rep() methods for periods, intervals, and durations



MINOR CHANGES

* added a package help page with functions listed by purpose

* eseconds(), eminutes(), etc. are aliased to dseconds(), dminutes(), etc. to make it easier 
  to remember they are duration objects.
  
* changed leap.years() to leap_years() to maintain consistent naming scheme



BUG FIXES

* rewrote as.period() to create only positive periods.

* fixed rollover bug in update.POSIXct()

* edited make_diff() to display in days when approporiate, not weeks 